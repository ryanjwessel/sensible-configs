[user]
	email = rwessel@dataminr.com
	name = Ryan Wessel
[alias]
	a = add
	c = commit
	s = status
	f = fetch
	b = branch
	rb = rebase
	ch = checkout
	cfg = config
	prune = git remote update origin --prune
	resetLastCommit = reset --soft HEAD^

        mr = "!f() { git fetch origin merge-requests/${1}/head:mr-${1} && git checkout mr-${1}; }; f"
	
	# Local Graph Log (Ex. 'git localGraph master' shows git log for only that branch)
	# i.e. it will not show commits from branches that are merged into this one.
	localGraph = "!f() { git log --graph --abbrev-commit --decorate  --first-parent ${1}; }; f"
	
	# Global Graph Log (Ex. 'git graph master' shows git log for that branch and all branches that are merged into master)
	graph = "!f() { git log --graph --abbrev-commit --decorate ${1}; }; f"
	
	# Git Commit.
	cap = "!f() { git commit -m \"$@\"; }; f"

	# NEW.
	new = "!f() { git cap \"üì¶ NEW: $@\"; }; f"
	# IMPROVE.
	imp = "!f() { git cap \"üëå IMPROVE: $@\"; }; f"
	# FIX.
	fix = "!f() { git cap \"üêõ FIX: $@\"; }; f"
	# RELEASE.
	rlz = "!f() { git cap \"üöÄ RELEASE: $@\"; }; f"
	# DOC.
	doc = "!f() { git cap \"üìñ DOC: $@\"; }; f"
	# TEST.
	tst = "!f() { git cap \"ü§ñ TEST: $@\"; }; f"
	# BREAKING CHANGE.
	brk = "!f() { git cap \"‚ÄºÔ∏è BREAKING: $@\"; }; f"

	# FIND ASSIGNEES BASED ON # OF LINES CHANGED PER AUTHOR FOR ALL FILES TOUCHED BY THE PROVIDED BRANCH.
	assignees = "!f() { \
		git diff --name-only $1 origin/develop | \
		xargs -n1 git blame --line-porcelain | \
		grep \"^author \" | \
		sort | \
		uniq -c | \
		sort -nr; \
	}; f"

	# FIND COUNT OF LINES OF CODE PER PROJECT CONTRIBUTOR
	contributors = "!f() { \
		git ls-files -- 'src/*' ':!:src/__mocks__/*' ':!:.snap' | \
		xargs -n1 git blame --line-porcelain | \
		grep \"^author-mail \" | \
		sort | uniq -c | sort -nr; \
	}; f"
	
	# Delete local branches with remote branches that have been removed
	pruneLocal = "!f() { \
		for branch in $( \
			git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | \
			awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}' \
		); \
		do \
			git branch -D $branch; \
		done \
	}; f"

[fetch]
	prune = true
