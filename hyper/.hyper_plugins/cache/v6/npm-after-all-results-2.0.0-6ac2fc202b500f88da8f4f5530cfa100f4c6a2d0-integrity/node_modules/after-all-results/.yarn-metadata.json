{
  "manifest": {
    "name": "after-all-results",
    "version": "2.0.0",
    "description": "Bundle results of async functions calls into one callback with all the results",
    "main": "index.js",
    "scripts": {
      "test": "node test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/watson/after-all-results.git"
    },
    "keywords": [
      "parallel",
      "callback",
      "async",
      "done"
    ],
    "author": {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/watson/after-all-results/issues"
    },
    "homepage": "https://github.com/watson/after-all-results",
    "devDependencies": {
      "tape": "^2.14.0"
    },
    "_registry": "npm",
    "_loc": "/Users/rwessel/.hyper_plugins/cache/v6/npm-after-all-results-2.0.0-6ac2fc202b500f88da8f4f5530cfa100f4c6a2d0-integrity/node_modules/after-all-results/package.json",
    "readmeFilename": "README.md",
    "readme": "# after-all-results\n\nIf you have multiple async function calls that you want to run in\nparallel and collect all their results in an array, this is the module\nfor you.\n\nIt's like [after-all](https://github.com/sorribas/after-all) with a\nbuild in results aggregator.\n\n[![build status](https://secure.travis-ci.org/watson/after-all-results.png)](http://travis-ci.org/watson/after-all-results)\n\n## Installation\n\n```\nnpm install after-all-results\n```\n\n## Usage\n\nFirst require the module:\n\n```javascript\nvar afterAll = require('after-all-results');\n```\n\nThen initialize with a callback that should be called once all the async\nstuff is done:\n\n```javascript\nvar next = afterAll(function (err, results) {\n  // all done!\n  console.log(results);\n});\n```\n\nThe returned `next` function is essentially just a smart\ncallback-generator. The after-all-results module will wait and not call\nthe all-done function until all the generated callbacks have been\ncalled:\n\n```javascript\nsomeAsyncFunction(next());\nanotherAsyncFunction(next());\n```\n\n**Note:** It is important that all `next()` calls are done on the same\ntick as the inital call to `afterAll()`!\n\n### Bonus: Inception mode\n\n```javascript\nvar next = afterAll(function (err, results) {\n  // results will be an array of `arg1` from below\n  console.log('Done with everything!');\n});\n\nasync(next(function (err, arg1, arg2) {\n  console.log('Done with first call to async');\n});\n\nasync(next(function (err, arg1, arg2) {\n  console.log('Done with second call to async');\n});\n```\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Thomas Watson Steen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/after-all-results/-/after-all-results-2.0.0.tgz#6ac2fc202b500f88da8f4f5530cfa100f4c6a2d0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/after-all-results/-/after-all-results-2.0.0.tgz",
    "hash": "6ac2fc202b500f88da8f4f5530cfa100f4c6a2d0",
    "integrity": "sha1-asL8ICtQD4jaj09VMM+hAPTGotA=",
    "registry": "npm",
    "packageName": "after-all-results",
    "cacheIntegrity": "sha512-2zHEyuhSJOuCrmas9YV0YL/MFCWLxe1dS6k/ENhgYrb/JqyMnadLN4iIAc9kkZrbElMDyyAGH/0J18OPErOWLg== sha1-asL8ICtQD4jaj09VMM+hAPTGotA="
  },
  "registry": "npm",
  "hash": "6ac2fc202b500f88da8f4f5530cfa100f4c6a2d0"
}