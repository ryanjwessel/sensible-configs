{
  "manifest": {
    "name": "git-state",
    "version": "4.1.0",
    "description": "Get the current state of any git repository",
    "main": "index.js",
    "scripts": {
      "pretest": "touch dummy.file",
      "test": "standard && tape test.js",
      "posttest": "rm dummy.file"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/watson/git-state.git"
    },
    "dependencies": {
      "after-all-results": "^2.0.0"
    },
    "devDependencies": {
      "standard": "^10.0.2",
      "tape": "^4.4.0"
    },
    "engines": {
      "node": ">=4.0.0"
    },
    "keywords": [
      "git",
      "status",
      "state",
      "branch",
      "repo",
      "repository",
      "ahead",
      "dirty",
      "untracked"
    ],
    "author": {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk",
      "url": "https://twitter.com/wa7son"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/watson/git-state/issues"
    },
    "homepage": "https://github.com/watson/git-state",
    "coordinates": [
      55.777897,
      12.592192
    ],
    "_registry": "npm",
    "_loc": "/Users/rwessel/.hyper_plugins/cache/v1/npm-git-state-4.1.0-23c3a34b99b87ddb34527c741711498b92fb8e0a/package.json",
    "readmeFilename": "README.md",
    "readme": "# git-state\n\nGet the current state of any git repository.\n\n[![npm](https://img.shields.io/npm/v/git-state.svg)](https://www.npmjs.com/package/git-state)\n[![Build status](https://travis-ci.org/watson/git-state.svg?branch=master)](https://travis-ci.org/watson/git-state)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n## Installation\n\n```\nnpm install git-state --save\n```\n\n## Usage\n\n```js\nvar git = require('git-state')\n\nvar path = '/path/to/git/repo'\n\ngit.isGit(path, function (exists) {\n  if (!exists) return\n\n  git.check(path, function (err, result) {\n    if (err) throw err\n    console.log(result) // => { branch: 'master',\n                        //      ahead: 0,\n                        //      dirty: 9,\n                        //      untracked: 1,\n                        //      stashes: 0 }\n  })\n})\n```\n\n## API\n\n#### `isGit(path, callback)`\n\nCalls the `callback` with a boolean which is either `true` or `false`\ndepending on if the given path contains a git repository.\n\n#### `isGitSync(path)`\n\nSynchronous version of `isGit()` which returns either `true` or `false`\ndepending on if the given path contains a git repository.\n\n#### `check(path[, options], callback)`\n\nWill check the state of the git repository at the given `path` and call\nthe `callback`. The `callback` will be called with two arguments: An\noptional error object and a result object.\n\nThe result object contains the following properties:\n\n- `branch` - The currently checked out branch\n- `ahead` - The amount of commits the current branch is ahead of the\n  remote (may be `NaN` if there for instance is no remote)\n- `dirty` - The number of dirty files\n- `untracked` - The number of untracked files\n- `stashes` - The number of stored stashes\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `checkSync(path[, options])`\n\nSynchronous version of `check()`.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n#### `untracked(path[, options], callback)`\n\nGet the amount of untracked files in the git repository at the given\n`path`.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a number representing the amount of untracked files.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `untrackedSync(path[, options])`\n\nSynchronous version of `untracked()`.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n#### `dirty(path[, options], callback)`\n\nGet the amount of dirty files in the git repository at the given\n`path`.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a number representing the amount of dirty files.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `dirtySync(path[, options])`\n\nSynchronous version of `dirty() `.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n#### `branch(path[, options], callback)`\n\nGet the currently checked out branch in the git repository at the given\n`path`.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a string with the branch name.\n\nIf the branch name cannot be found, a falsy value will be returned.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `branchSync(path[, options])`\n\nSynchronous version of `branch()`. Returns null if no branch is set.\n\n#### `ahead(path[, options], callback)`\n\nGet the amount of commits the current branch in the git repository at\nthe given `path` is ahead of its remote.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a number indicating the amount of commits the branch is ahead\nof its remote.\n\nIf the number cannot be determined, `NaN` will be returned instead.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `aheadSync(path[, options])`\n\nSynchronous version of `ahead()`.\n\nIf the number cannot be determined, `NaN` will be returned instead.\n\n#### `commit(path[, options], callback)`\n\nGet the short-hash (e.g. `7b0a3ab`) for the latest commit at `HEAD` in\nthe git repository at the given `path`.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a string containing the short-hash.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `commitSync(path[, options])`\n\nSynchronous version of `commit()`.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n#### `stashes(path[, options], callback)`\n\nGet the amount of stashed changes in the git repository at the given\n`path`.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a number representing the amount of stashed changes.\n\nSupports the following `options`:\n\n- `maxBuffer` - largest amount of data (in bytes) allowed on stdout or\n  stderr - if exceeded child process is killed (default: `200*1024`)\n\n#### `stashesSync(path[, options])`\n\nSynchronous version of `stashes()`.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n#### `message(path[, options], callback)`\n\nGet the commit message of the latest commit.\n\nThe `callback` will be called with two arguments: An optional error\nobject and a string containing the commit message.\n\n#### `messageSync(path[, options])`\n\nSynchronous version of `message()`.\n\nCan throw error. This typically happens if you are running a too old\nversion of Node.js (< 0.12), if git isn't found or if the path isn't\na git repository.\n\n## Shell implementation\n\nInside the [`bin`](https://github.com/watson/git-state/tree/master/bin)\nfolder is a set of shell scripts which will perform the same checks as\nthe `isGit()` and `check()` functions, but just in pure bash. This\nallows you for instance to modify your command prompt without having to\ninvoke node (which can be kind of slow if done at every request). In\nfact this is exactly what the\n[git-ps1](https://github.com/watson/git-ps1) module does for you.\n\n- `bin/isgit` - exit code will be 0 if cwd is inside a git repo,\n  otherwise 1\n- `bin/ahead` - exit code will be 0 if result is `0`, otherwise 1\n- `bin/branch` - exit code will be 0 if result is `master`, otherwise 1\n- `bin/dirty` - exit code will be 0 if result is `0`, otherwise 1\n- `bin/untracked` - exit code will be 0 if result is `0`, otherwise 1\n- `bin/stashes` - exit code will be 0 if result is `0`, otherwise 1\n- `bin/commit` - exit code will be 0 if a commit can be found, otherwise 1\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2018 Thomas Watson Steen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/git-state/-/git-state-4.1.0.tgz#23c3a34b99b87ddb34527c741711498b92fb8e0a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/git-state/-/git-state-4.1.0.tgz",
    "hash": "23c3a34b99b87ddb34527c741711498b92fb8e0a",
    "registry": "npm",
    "packageName": "git-state"
  },
  "registry": "npm",
  "hash": "23c3a34b99b87ddb34527c741711498b92fb8e0a"
}